package uk.co.pentest.psychoPATH;

import burp.BurpExtender;
import burp.IBurpExtenderCallbacks;
import burp.IHttpRequestResponse;
import burp.IIntruderPayloadGenerator;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.ListModel;

/**
 *
 * @author julianh
 */
public final class IntruderPayloadGenerator implements IIntruderPayloadGenerator 
{

    ArrayList<String> psychopaths; // the final payloads
    int payloadIndex; // counter for the payload mark       
    String payloadType; // path or mark
    IBurpExtenderCallbacks callbacks = BurpExtender.getBurpCallbacks();
    ArrayList<String> directoriesToCheck; // this is for the verification phase
    PsychoTab tab;

    public IntruderPayloadGenerator(String payloadType, PsychoTab tab) 
    {
        this.payloadType = payloadType;
        this.tab=tab;
        if(payloadType!="check") 
        {
            Set<String> targetDocroots; // this is a merge of the prefixes and targets
            ArrayList<String> brutDocrootSuffixes; // we'll also merge all targets into this
            ArrayList<String> traversals;
            String fileName;
            PsychoPanel panel=tab.getUiComponent();                        
            if(psychopaths==null) psychopaths = new ArrayList<>();
            if(!psychopaths.isEmpty()) psychopaths.clear();
            // generate all the payloads and put them into the arr

            targetDocroots = new HashSet<String>();
            brutDocrootSuffixes = new ArrayList<String>();
            traversals = new ArrayList<String>(); 
            // 0) populate traversals and the filename
            ListModel travListModel = panel.traversalsList.getModel();
            for(int i=0;i<travListModel.getSize();i++)
            {
                traversals.add(travListModel.getElementAt(i).toString());
            }
            fileName=panel.fileNameField.getText();
      
            // 1) copy @brute_doc_root_prefixes to @target_docroots

            ListModel docListModel = panel.docrootsList.getModel();
            //if(docListModel==null) this.panel.stdout.println("The thing is empty...");
            
            for (int i=0; i<docListModel.getSize(); i++) 
            {
                 String targetDocroot=docListModel.getElementAt(i).toString();
                 // if the targetDocroot contains the {TARGET} holder
               
                 if(targetDocroot.contains("{TARGET}"))
                 {
                    // iterate over the targets 
                    // and create corresponding versions of the targetDocroot by substitution
                    ListModel targetListModel = panel.targetsList.getModel();
                   
                    for(int j=0;j<targetListModel.getSize();j++)
                    {
                        String target=targetListModel.getElementAt(j).toString();
                        String newTargetDocroot=targetDocroot.replace("{TARGET}",target);
                        targetDocroots.add(newTargetDocroot);
                    } 
                                        
                 }
                 // otherwise simply copy the targetDocroot                
                 else
                 {
                    targetDocroots.add(targetDocroot);     
                 }                
            } 
            
            // add the empty suffix
            brutDocrootSuffixes.add("");
            // 2.1) copy @targets to @brut_doc_suffixes
            ListModel targetListModel = panel.targetsList.getModel();
            for(int i=0;i<targetListModel.getSize();i++)
            {
                String target=targetListModel.getElementAt(i).toString();
                brutDocrootSuffixes.add(target);
            }                 
            // 2.2) copy @suffixes to @brut_doc_suffixes
            ListModel suffixListModel = panel.suffixesList.getModel();
            for(int i=0;i<suffixListModel.getSize();i++)
            {
                String suffix=suffixListModel.getElementAt(i).toString();
                brutDocrootSuffixes.add(suffix);
            }
            // 3.1) iterate through @targetDocroots -> 
            //        3.2)   iterate through @brute_doc_root_suffixes -> 
            //                3.3)      iterate through traversals -> 
            //                     3.4)              generate psychopaths
            // 3.4.1 the bare filename with no prepended path injections
            psychopaths.add(fileName);             
            // 3.4.2 the pure traversal + filename permutations (for upload directories hidden within the document root)
            for(int i=0;i<traversals.size();i++)
            {
                psychopaths.add(traversals.get(i)+"/"+fileName);
            }
            // 3.4.3 the targetDocroot+brutDocrootsuffix permutations
            for(String targetDocRoot : targetDocroots) // 3.1
            {
                for(int i=0;i<brutDocrootSuffixes.size();i++) // 3.2
                {     
                    for(int j=0;j<traversals.size();j++)        // 3.3
                    {
                        psychopaths.add(traversals.get(j)+targetDocRoot+"/"+brutDocrootSuffixes.get(i)+"/"+fileName);
                    }
                }
            }                

        }
        if("check".equals(payloadType)&&directoriesToCheck==null)
        {
            directoriesToCheck=new ArrayList<>();
            directoriesToCheck=tab.psychoPanel.genericSuffixes; // we simply steal this list
        }
    }
    @Override
    public boolean hasMorePayloads() 
    {
        if("check".equals(payloadType))
        {
            return payloadIndex<directoriesToCheck.size();
        }
        return payloadIndex < psychopaths.size();       
    }

    @Override
    public byte[] getNextPayload(byte[] baseValue) 
    {                
        byte[] payload = new byte[0];
        if(payloadType!="check")
        {
            if(payloadType=="mark")
            {
                // return the payload mark, which is simply a unique string (number -> index)
                payload=callbacks.getHelpers().stringToBytes(Integer.toString(payloadIndex));
            }
            else
            {
                // return the actual payload
                payload = callbacks.getHelpers().stringToBytes(psychopaths.get(payloadIndex).toString());   
            }

        }
        else
        {
            payload = callbacks.getHelpers().stringToBytes(directoriesToCheck.get(payloadIndex).toString()+"/"+tab.psychoPanel.fileNameField.getText()); 
        }
        payloadIndex++; // increase the index
        return payload;
    }
    @Override
    public void reset() 
    {
        payloadIndex = 0;
        if(payloadType!="check")
        {
            psychopaths.clear();
        }
        else
        {
            directoriesToCheck.clear();
        }
    }       
}