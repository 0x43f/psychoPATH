/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.co.pentest.psychoPATH;

import burp.IHttpRequestResponse;
import java.awt.BorderLayout;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.HierarchyEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BoxLayout;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;

import javax.swing.JLabel;
import javax.swing.JList;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

/**
 *
 * @author ewilded
 */
public final class PsychoPanel extends JPanel {
    static String PROMPT_TITLE = "psychoPATH extension";


    protected JLabel optionsLabel; 
    /*
    protected JButton traversalsPasteButton;
    protected JButton traversalsLoadButton;
    protected JButton traversalsRemoveButton;
    protected JButton traversalsClearButton;
    protected JButton traversalsAddButton;
    private JComboBox traversalsAddLists;        
    protected JList traversalsList; 
    protected JScrollPane traversalsListScroller;
    */
    
    protected JLabel docrootsLabel;        
    protected JButton docrootsPasteButton;
    protected JButton docrootsLoadButton;
    protected JButton docrootsRemoveButton;
    protected JButton docrootsClearButton;
    protected JButton docrootsAddButton;
    private JComboBox docrootsAddLists;     
    protected JList docrootsList; 
    protected JScrollPane docrootsListScroller;
   
    protected JLabel suffixesLabel;        
    protected JButton suffixesPasteButton;
    protected JButton suffixesLoadButton;
    protected JButton suffixesRemoveButton;
    protected JButton suffixesClearButton;
    protected JButton suffixesAddButton; 
    protected JList suffixesList; 
    protected JScrollPane suffixesListScroller;
 
    protected JLabel targetsLabel;        
    protected JButton targetsPasteButton;
    protected JButton targetsLoadButton;
    protected JButton targetsRemoveButton;
    protected JButton targetsClearButton;
    protected JButton targetsAddButton;    
    protected JList targetsList;
    protected JScrollPane targetsListScroller;
    protected JLabel fileName;
    protected JTextArea fileNameField;
    protected JTextArea logOutput;
    
    protected String proto="https";
    protected String hostname="example.org";
    protected ArrayList<String> genericSuffixes;
    protected int defaultMaxTraversalsPerPayload=8; 
    protected int maxTraversalsPerPayload=8; // the number of maximum traversals in our payloads - used to pick the longest ones while optimizing - later we'll just calculate this value on the fly
    protected boolean optimizeDocroots=true; // whether or to only prepend docroots with the longest versions of traversals
    protected boolean evasiveTechniques=true;
    protected String dot=".";
    protected String slash="/";
    protected ArrayList<String> basicTraversals;
    protected ArrayList<String> evasiveTraversals;

    PrintWriter stdout;
    
    public void updateScope(String proto, String hostname)
    {
        this.proto=proto;
        this.hostname=hostname;
        // ok, now we update the targets
        ArrayList<String> newList = new ArrayList<String>();
        newList.add(hostname);
        // if hostname is not an IP address - but contains dots, it is a domain name
        String ipPattern = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
               
        Pattern pattern = Pattern.compile(ipPattern);
        Matcher matcher = pattern.matcher(hostname);
        if(!matcher.matches())
        {
            // in such case split the string by dots, remove the tld
            // and propagate the list
            String[] parts = hostname.split(".");
            for(int i=0;i<parts.length-1;i++)
            {
                newList.add(parts[i]);
            }
        }
        // propagate the list to the interface
        targetsList.setListData(newList.toArray());       
        // now is the time to update suffixes
        genericSuffixes.clear();
        IHttpRequestResponse[] items = PsychoPATH.callbacks.getSiteMap(proto+"://"+hostname);
        for(int i=0;i<items.length;i++)
        {
            //if(items[i].getStatusCode()!=404) continue; // skipping 404s might not be a good idea - some servers return 404s for existing directories when no deeper existing URI is requested            
            String path=items[i].getUrl().getPath();
            path=path.substring(0,path.lastIndexOf("/"));
            if(!genericSuffixes.contains(path)) 
            {                
                genericSuffixes.add(path);
                logOutput("Adding "+path+" to the dir check payloads and attack suffixes.\n");
            }
        }        
        // we propagate the list to the GUI, so it can be adjusted before the attack
        String[] arr;
        arr = new String[genericSuffixes.size()];
        for(int i =0;i<genericSuffixes.size();i++)
        {
            arr[i]=genericSuffixes.get(i);
        }        
        appendListData(suffixesList,arr); // we cannot cast, we'll just merge              
        // the genericSuffixes list will, in turn, be used by the directory checker logic of the IntruderPayloadGenerator
        if(hostname!="example.org") this.logOutput("Scope propagated.\n");
    }
    protected void appendListData(JList list, String[] items)
    {
        ArrayList tmp = new ArrayList();

         for (int i=0; i < list.getModel().getSize(); i++) {
            String elem = (String) list.getModel().getElementAt(i);           
            tmp.add(elem);
        }
        for(String item: items)
        {
            if(!tmp.contains(item)) tmp.add(item);
        }
        list.setListData(tmp.toArray());
    }
    private void removeFromListData(JList list, String item)
    {
        ArrayList tmp = new ArrayList();

         for (int i=0; i < list.getModel().getSize(); i++) {
            String elem = (String) list.getModel().getElementAt(i); 
            if(!elem.equals(item)) tmp.add(elem);
        }
        list.setListData(tmp.toArray());
    }

    PsychoPanel() {
        stdout = new PrintWriter(PsychoPATH.callbacks.getStdout(), true);
        genericSuffixes=new ArrayList<>();
        setLayout(new BorderLayout());
        // CREATE THE PANEL SKELETON
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
        mainPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        
        //JPanel optionsPanel = new JPanel();
        //optionsPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        
        JPanel targetsPanel = new JPanel();
        
        JPanel targetsPanelRight = new JPanel();
        JPanel targetsPanelLeft = new JPanel();
        targetsPanelRight.setLayout(new BoxLayout(targetsPanelRight , BoxLayout.Y_AXIS));
        targetsPanelLeft.setLayout(new BoxLayout(targetsPanelLeft , BoxLayout.Y_AXIS));
        JPanel pathsPanel = new JPanel(new GridLayout(1,4));
        //JPanel logPanel = new JPanel();
        //logPanel.setLayout(new BoxLayout(logPanel, BoxLayout.Y_AXIS));        
    
        
        JPanel suffixesPanel = new JPanel(new GridLayout(1,2));
        JPanel suffixesPanelRight = new JPanel();
        JPanel suffixesPanelLeft = new JPanel();
        suffixesPanelRight.setLayout(new BoxLayout(suffixesPanelRight , BoxLayout.Y_AXIS));
        suffixesPanelLeft.setLayout(new BoxLayout(suffixesPanelLeft , BoxLayout.Y_AXIS));
        

        
        
        JPanel traversalPanel = new JPanel(new GridLayout(1,2));        
        JPanel traversalPanelLeft = new JPanel();
        traversalPanelLeft.setLayout(new BoxLayout(traversalPanelLeft, BoxLayout.Y_AXIS));
                
        JPanel traversalPanelRight = new JPanel();
        traversalPanelRight.setLayout(new BoxLayout(traversalPanelRight, BoxLayout.Y_AXIS));
        
        
        
        
        JPanel docrootsPanel = new JPanel(new GridLayout(1,2));
        JPanel docrootsPanelRight = new JPanel();
        docrootsPanelRight.setLayout(new BoxLayout(docrootsPanelRight, BoxLayout.Y_AXIS));
        JPanel docrootsPanelLeft = new JPanel();
        docrootsPanelLeft.setLayout(new BoxLayout(docrootsPanelLeft, BoxLayout.Y_AXIS));        

        // PATHS PANEL START   
        // basic traversal units (please refer to the readme for an explanation)
        this.basicTraversals = new ArrayList<>();
        this.evasiveTraversals = new ArrayList<>();
        this.basicTraversals.add(this.dot+this.dot+this.slash);                                 // simple '../'
        this.evasiveTraversals.add(this.dot+this.dot+this.dot+this.dot+this.slash+this.slash);  // evasive '....//'
        this.evasiveTraversals.add(this.dot+this.dot+this.dot+this.slash+this.slash);            // evasive '...//'
        this.evasiveTraversals.add(this.dot+this.dot+this.dot+this.dot+this.dot+this.slash+this.slash+this.slash); // evasive '.....///'    
        
        optionsLabel = new JLabel("psychoPATH configuration");
        JCheckBox optimizeDocrootTraversalsBox = new JCheckBox();
        //optimizeDocrootTraversalsBox
        optimizeDocrootTraversalsBox.setSelected(true);
        optimizeDocrootTraversalsBox.addItemListener(new ItemListener() {
             @Override
            public void itemStateChanged(ItemEvent e) {
            if(e.getStateChange() == ItemEvent.SELECTED) {//checkbox has been selected
                optimizeDocroots=true;
            } else {
                    optimizeDocroots=false;
                    };
            }          
        });
        JLabel optimizeDocrootTraversalsLabel = new JLabel();
        optimizeDocrootTraversalsLabel.setText("Optimize webroot payloads");
        JCheckBox evasiveTechniquesBox = new JCheckBox();
        evasiveTechniquesBox.setSelected(true);
        evasiveTechniquesBox.addItemListener(new ItemListener() {
             @Override
            public void itemStateChanged(ItemEvent e) {
            if(e.getStateChange() == ItemEvent.SELECTED) {//checkbox has been selected
                evasiveTechniques=true;
            } else {
                    evasiveTechniques=false;
                    };
            }          
        });
        JLabel evasiveTechniquesLabel = new JLabel();        
        evasiveTechniquesLabel.setText("Use evasive techniques");
        JLabel numberOfTraversalsLabel = new JLabel();
        numberOfTraversalsLabel.setText("The maximum number of traversals: ");
        JTextArea numberOfTraversals = new JTextArea(1,2);
        numberOfTraversals.setText(Integer.toString(this.defaultMaxTraversalsPerPayload));
                
        // OPTIONS PANEL START
        JPanel optionsPanel = new JPanel();
        optionsPanel.setLayout(new BoxLayout(optionsPanel , BoxLayout.Y_AXIS));
        JPanel fileNamePanel=new JPanel();
        fileName = new JLabel("Filename:");
        fileNameField = new JTextArea(1,20);
        fileNameField.setText("a.jpg");
        fileNamePanel.add(fileName);
        fileNamePanel.add(fileNameField);
        optionsPanel.add(optionsLabel);
        optionsPanel.add(fileNamePanel);
        JPanel optimizeDocrootPanel = new JPanel();
        optimizeDocrootPanel.add(optimizeDocrootTraversalsLabel);
        optimizeDocrootPanel.add(optimizeDocrootTraversalsBox);
        optionsPanel.add(optimizeDocrootPanel);
        JPanel evasivePanel = new JPanel();        
        evasivePanel.add(evasiveTechniquesLabel);
        evasivePanel.add(evasiveTechniquesBox);
        optionsPanel.add(evasivePanel);
        JPanel numberOfTraversalsPanel = new JPanel();
        numberOfTraversalsPanel.add(numberOfTraversalsLabel);
        numberOfTraversalsPanel.add(numberOfTraversals);
        optionsPanel.add(numberOfTraversalsPanel);                     
        
        // END OF OPTIONS PANEL
        
        
        
        // DOCROOTS PANEL START
        String[] universalDocroots = { "/var/www",
 "/usr/local/httpd", 
 "/usr/local/www",
 "/usr/local/httpd/{TARGET}", 
 "/usr/local/www/{TARGET}",
 "/srv/www", 
 "/var/www/html",
 "/var/www/{TARGET}",
 "/srv/www/{TARGET}", 
 "/var/www/html/{TARGET}",
 "/var/www/vhosts/{TARGET}", 
 "/var/www/virtual/{TARGET}", 
 "/var/www/clients/vhosts/{TARGET}", 
 "/var/www/clients/virtual/{TARGET}"};
        String[] nginxDocroots = {"/var/www/nginx-default"};
        String[] apacheDocroots = { "/usr/local/apache", 
 "/usr/local/apache2", 
  "/usr/local/apache/{TARGET}", 
 "/usr/local/apache2/{TARGET}", 
 "/usr/local/www/apache/{TARGET}", 
 "/usr/local/www/apache24/{TARGET}",
 "/usr/local/{TARGET}/apache/www/apache22/{TARGET}",
 "/usr/local/apache/www/apache22/{TARGET}",
 "/usr/local/{TARGET}/apache/www/apache22/{TARGET}"};
        String[] tomcatDocroots = { "/usr/local/tomcat/webapps/{TARGET}",
 "/usr/local/tomcat01/webapps/{TARGET}", 
 "/usr/local/tomcat02/webapps/{TARGET}",
 "/opt/tomcat5/{TARGET}",
 "/opt/tomcat6/{TARGET}",
 "/opt/tomcat7/{TARGET}",
 "/opt/tomcat8/{TARGET}",
 "/opt/tomcat5/webapps/{TARGET}",
 "/opt/tomcat6/webapps/{TARGET}",
 "/opt/tomcat7/webapps/{TARGET}",
 "/opt/tomcat8/webapps/{TARGET}",
 "/opt/tomcat5/webapps",
 "/opt/tomcat6/webapps",
 "/opt/tomcat7/webapps",
 "/opt/tomcat8/webapps",
 "/var/lib/tomcat7/webapps",
 "/var/lib/tomcat7/webapps/{TARGET}",
 "/var/lib/tomcat8/webapps",
 "/var/lib/tomcat8/webapps/{TARGET}"};
        
        docrootsLabel = new JLabel("Doc roots");
        docrootsList = new JList(); //argument has type Object[]
        docrootsList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);        
        docrootsList.setLayoutOrientation(JList.VERTICAL);
        docrootsList.setVisibleRowCount(20);
        
        docrootsListScroller = new JScrollPane(docrootsList);
        docrootsListScroller.setPreferredSize(new Dimension(250, 400));
                  
        // list management buttons
        docrootsPasteButton = new JButton("Paste");
        docrootsPasteButton.addActionListener((ActionEvent e) -> {
                // button callback                
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Clipboard clipboard = toolkit.getSystemClipboard();
		String result = "";
                  try {
                    result = (String) clipboard.getData(DataFlavor.stringFlavor);
                   } 
                  catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                   }
                 docrootsList.setListData(result.split("\\r*\\n"));
            
        });
        docrootsLoadButton = new JButton("Load");
        docrootsLoadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                //Create a file chooser
                JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog(PsychoPanel.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) 
                {
                    Scanner inFile1;
                    try {
                        inFile1 = new Scanner(fc.getSelectedFile()).useDelimiter("\\r*\\n");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                        return;
                    }
                    List<String> temps = new ArrayList<>();
                    while (inFile1.hasNext()) 
                    {
                        String line = inFile1.next();
                        temps.add(line);
                    }
                    inFile1.close();
                    docrootsList.setListData(temps.toArray());
                }                
            }
        });
        docrootsRemoveButton = new JButton("Remove");
        docrootsRemoveButton.addActionListener((ActionEvent e) -> {
                // button callback
                if(docrootsList.getSelectedIndex()!=-1) removeFromListData(docrootsList,(String)docrootsList.getModel().getElementAt(docrootsList.getSelectedIndex()));                
                
        });
        docrootsClearButton = new JButton("Clear");
        docrootsClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                String [] empty = {};
                docrootsList.setListData(empty); //for some weird reason removeAll did not want to work.
            }
        });   
        JTextField docrootsAddField = new JTextField(8);
        
        docrootsAddButton = new JButton("Add");
        docrootsAddButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                String [] tmp = {docrootsAddField.getText()};
                appendListData(docrootsList,tmp);
            }
        });    
        docrootsAddLists = new JComboBox();
        docrootsAddLists.addItem("Add from list ...");
        String[] docrootListNames= { "Universal", "Nginx", "Apache", "Tomcat", "All"};
        for (String docrootListName : docrootListNames) {
            docrootsAddLists.addItem(docrootListName);
        }
        docrootsAddLists.addActionListener((ActionEvent e) -> {
            switch(docrootsAddLists.getSelectedIndex())
            { 
                case 1 : { appendListData(docrootsList,universalDocroots); break;}
                case 2 : { appendListData(docrootsList,nginxDocroots); break;}
                case 3 : { appendListData(docrootsList,apacheDocroots); break;}
                case 4 : { appendListData(docrootsList,tomcatDocroots); break;}
                case 5 : { // "All"
                    
                    appendListData(docrootsList,universalDocroots); 
                    appendListData(docrootsList,nginxDocroots); 
                    appendListData(docrootsList,apacheDocroots);
                    appendListData(docrootsList,tomcatDocroots);
                    break;
                }
            }
        });
        appendListData(docrootsList,universalDocroots); 
        appendListData(docrootsList,nginxDocroots); 
        appendListData(docrootsList,apacheDocroots);
        appendListData(docrootsList,tomcatDocroots);
        
        docrootsPanelRight.add(docrootsLabel);
        docrootsPanelRight.add(docrootsListScroller);
        docrootsPanelRight.add(docrootsAddLists);
              

        docrootsPanelLeft.add(docrootsPasteButton);
        docrootsPanelLeft.add(docrootsLoadButton);
        docrootsPanelLeft.add(docrootsRemoveButton);
        docrootsPanelLeft.add(docrootsClearButton);
        JPanel docrootsPanelLeftAdd = new JPanel();
        
        docrootsPanelLeftAdd.add(docrootsAddButton);
        docrootsPanelLeftAdd.add(docrootsAddField);
        docrootsPanelLeft.add(docrootsPanelLeftAdd);
        
        docrootsPanel.add(docrootsPanelLeft);
        docrootsPanel.add(docrootsPanelRight);        
        // DOCROOTS PANEL STOP

        // SUFFIXES PANEL START
       // suffixes PANEL START
        String[] suffixes= {"","html", "htdocs", "httpdocs", "php", "public", "src", "site", "build", "web", "data", "sites/all", "www/build"};
        //String[] suffixes = {""};
        // the default list of suffixes is currently global, although it is quite apache-specific, might be worth clearing them once a non-apache webroots are choosen
        // 
   
        suffixesLabel = new JLabel("Suffixes");
        suffixesList = new JList(); //argument has type Object[]
        suffixesList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);        
        suffixesList.setLayoutOrientation(JList.VERTICAL);
        suffixesList.setVisibleRowCount(20);
        
       
        suffixesListScroller = new JScrollPane(suffixesList);
        suffixesListScroller.setPreferredSize(new Dimension(250, 400));
                  
        // list management buttons
        suffixesPasteButton = new JButton("Paste");
        suffixesPasteButton.addActionListener((ActionEvent e) -> {
                // button callback                
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Clipboard clipboard = toolkit.getSystemClipboard();
		String result = "";
                  try {
                    result = (String) clipboard.getData(DataFlavor.stringFlavor);
                   } 
                  catch (UnsupportedFlavorException ex) {
                    Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                   } catch (IOException ex) {
                  Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 suffixesList.setListData(result.split("\\r*\\n"));
            
        });
        suffixesLoadButton = new JButton("Load");
        suffixesLoadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                //Create a file chooser
                JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog(PsychoPanel.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) 
                {
                    Scanner inFile1;
                    try {
                        inFile1 = new Scanner(fc.getSelectedFile()).useDelimiter("\\r*\\n");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                        return;
                    }
                    List<String> temps = new ArrayList<>();
                    while (inFile1.hasNext()) 
                    {
                        String line = inFile1.next();
                        temps.add(line);
                    }
                    inFile1.close();
                    suffixesList.setListData(temps.toArray());
                }                
            }
        });
        suffixesRemoveButton = new JButton("Remove");
        suffixesRemoveButton.addActionListener((ActionEvent e) -> {
                // button callback
                if(suffixesList.getSelectedIndex()!=-1) removeFromListData(suffixesList,(String)suffixesList.getModel().getElementAt(suffixesList.getSelectedIndex()));                
                
        });
        suffixesClearButton = new JButton("Clear");
        suffixesClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                String [] empty = {};
                suffixesList.setListData(empty); //for some weird reason removeAll did not want to work.
            }
        });   
        JTextField suffixesAddField = new JTextField(8);
        suffixesAddButton = new JButton("Add");
        suffixesAddButton.addActionListener((ActionEvent e) -> {
                String [] tmp = {suffixesAddField.getText()};
                appendListData(suffixesList,tmp);
        });    
     
        suffixesList.setListData(suffixes);
        suffixesPanelRight.add(suffixesLabel);
        suffixesPanelRight.add(suffixesListScroller);
              

        suffixesPanelLeft.add(suffixesPasteButton);
        suffixesPanelLeft.add(suffixesLoadButton);
        suffixesPanelLeft.add(suffixesRemoveButton);
        suffixesPanelLeft.add(suffixesClearButton);
        JPanel suffixesPanelLeftAdd = new JPanel();
        suffixesPanelLeftAdd.add(suffixesAddButton);
        suffixesPanelLeftAdd.add(suffixesAddField);        
        suffixesPanelLeft.add(suffixesPanelLeftAdd);
        
        suffixesPanel.add(suffixesPanelLeft);
        suffixesPanel.add(suffixesPanelRight); 
        // SUFFIXES PANEL STOP
        
        // TARGETS PANEL START
      
        // this needs to be replaced with a list populated from the scope and from the intruder content...  intruder content is better
        // 1) we need to fetch the domain
        // 2) based on the domain, we generate the list of targets ("Send to psychoPATH" menu option?)
        // 3) we use the domain in querying the site map (better than using the scope, for many reasons)
       
   
        targetsLabel = new JLabel("Targets");
        targetsList = new JList(); //argument has type Object[]
        targetsList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);        
        targetsList.setLayoutOrientation(JList.VERTICAL);
        targetsList.setVisibleRowCount(10);
       
        targetsListScroller = new JScrollPane(targetsList);
        targetsListScroller.setPreferredSize(new Dimension(250, 250));
                  
        // list management buttons
        targetsPasteButton = new JButton("Paste");
        targetsPasteButton.addActionListener((ActionEvent e) -> {
                // button callback                
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Clipboard clipboard = toolkit.getSystemClipboard();
		String result = "";
                  try {
                    result = (String) clipboard.getData(DataFlavor.stringFlavor);
                   } 
                  catch (UnsupportedFlavorException ex) {
                    Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                   } catch (IOException ex) {
                  Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 targetsList.setListData(result.split("\\r*\\n"));
            
        });
        targetsLoadButton = new JButton("Load");
        targetsLoadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                //Create a file chooser
                JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog(PsychoPanel.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) 
                {
                    Scanner inFile1;
                    try {
                        inFile1 = new Scanner(fc.getSelectedFile()).useDelimiter("\\r*\\n");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
                        return;
                    }
                    List<String> temps = new ArrayList<>();
                    while (inFile1.hasNext()) 
                    {
                        String line = inFile1.next();
                        temps.add(line);
                    }
                    inFile1.close();
                    targetsList.setListData(temps.toArray());
                }                
            }
        });
        targetsRemoveButton = new JButton("Remove");
        targetsRemoveButton.addActionListener((ActionEvent e) -> {
                // button callback
                if(targetsList.getSelectedIndex()!=-1) removeFromListData(targetsList,(String)targetsList.getModel().getElementAt(targetsList.getSelectedIndex()));                
                
        });
        targetsClearButton = new JButton("Clear");
        targetsClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // button callback
                String [] empty = {};
                targetsList.setListData(empty); //for some weird reason removeAll did not want to work.
            }
        });   
        JTextField targetesAddField = new JTextField(8);
        targetsAddButton = new JButton("Add");
        targetsAddButton.addActionListener((ActionEvent e) -> {
                String [] tmp = {targetesAddField.getText()};
                appendListData(targetsList,tmp);
        });    
        // logOutput = new JTextArea(20,50);
        this.updateScope(this.proto,this.hostname); 
        
        targetsPanelRight.add(targetsLabel);
        targetsPanelRight.add(targetsListScroller);
              

        targetsPanelLeft.add(targetsPasteButton);
        targetsPanelLeft.add(targetsLoadButton);
        targetsPanelLeft.add(targetsRemoveButton);
        targetsPanelLeft.add(targetsClearButton);
        JPanel targetsPanelLeftAdd = new JPanel();
        targetsPanelLeftAdd.add(targetsAddButton);
        targetsPanelLeftAdd.add(targetesAddField);        
        targetsPanelLeft.add(targetsPanelLeftAdd);
        
        targetsPanel.add(targetsPanelLeft);
        targetsPanel.add(targetsPanelRight);         
        // TARGETTS PANEL STOP
        // LOG PANEL START
        //JLabel logLabel = new JLabel("Output log:");
        //logPanel.add(logLabel);
        //logPanel.add(logOutput);
        // LOG PANEL STOP
        
        
        // ADD PANELS TO THE MAIN PSYCHO PANEL
        
        pathsPanel.add(optionsPanel);
        pathsPanel.add(docrootsPanel);
        pathsPanel.add(suffixesPanel);
        pathsPanel.add(targetsPanel);
        
        mainPanel.add(pathsPanel); // first row
        
        add(mainPanel,BorderLayout.NORTH);
        addHierarchyListener((HierarchyEvent evt) -> {
            PsychoPATH.PsychoTab.findTab();
        });        
    }
    public void logOutput(String msg)
    {
        //this.logOutput.append(msg);
        stdout.println(msg);
    }

}
